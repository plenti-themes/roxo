/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (15:12) {#each body as line}
function create_each_block(ctx) {
	let span;
	let t_value = /*line*/ ctx[9] + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*body*/ 64 && t_value !== (t_value = /*line*/ ctx[9] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div3;
	let div2;
	let div1;
	let article;
	let p0;
	let span0;
	let t0;
	let t1;
	let span1;
	let t2;
	let t3;
	let h2;
	let t4;
	let t5;
	let img;
	let img_src_value;
	let t6;
	let h3;
	let t7;
	let t8;
	let div0;
	let t9;
	let blockquote;
	let p1;
	let t10;
	let t11;
	let p2;
	let t12;
	let each_value = /*body*/ ctx[6];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			article = element("article");
			p0 = element("p");
			span0 = element("span");
			t0 = text(/*date*/ ctx[0]);
			t1 = text(" by ");
			span1 = element("span");
			t2 = text(/*author*/ ctx[1]);
			t3 = space();
			h2 = element("h2");
			t4 = text(/*title*/ ctx[2]);
			t5 = space();
			img = element("img");
			t6 = space();
			h3 = element("h3");
			t7 = text(/*subtitle*/ ctx[3]);
			t8 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t9 = space();
			blockquote = element("blockquote");
			p1 = element("p");
			t10 = text(/*quote*/ ctx[7]);
			t11 = space();
			p2 = element("p");
			t12 = text(/*signature*/ ctx[8]);
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div3 = claim_element(section_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			article = claim_element(div1_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			p0 = claim_element(article_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			span0 = claim_element(p0_nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, /*date*/ ctx[0]);
			span0_nodes.forEach(detach);
			t1 = claim_text(p0_nodes, " by ");
			span1 = claim_element(p0_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t2 = claim_text(span1_nodes, /*author*/ ctx[1]);
			span1_nodes.forEach(detach);
			p0_nodes.forEach(detach);
			t3 = claim_space(article_nodes);
			h2 = claim_element(article_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t4 = claim_text(h2_nodes, /*title*/ ctx[2]);
			h2_nodes.forEach(detach);
			t5 = claim_space(article_nodes);
			img = claim_element(article_nodes, "IMG", { class: true, src: true, alt: true });
			t6 = claim_space(article_nodes);
			h3 = claim_element(article_nodes, "H3", { id: true, class: true });
			var h3_nodes = children(h3);
			t7 = claim_text(h3_nodes, /*subtitle*/ ctx[3]);
			h3_nodes.forEach(detach);
			t8 = claim_space(article_nodes);
			div0 = claim_element(article_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			t9 = claim_space(article_nodes);
			blockquote = claim_element(article_nodes, "BLOCKQUOTE", { class: true });
			var blockquote_nodes = children(blockquote);
			p1 = claim_element(blockquote_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t10 = claim_text(p1_nodes, /*quote*/ ctx[7]);
			p1_nodes.forEach(detach);
			t11 = claim_space(blockquote_nodes);
			p2 = claim_element(blockquote_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t12 = claim_text(p2_nodes, /*signature*/ ctx[8]);
			p2_nodes.forEach(detach);
			blockquote_nodes.forEach(detach);
			article_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p0, "class", "date-author svelte-10y6o6x");
			attr(h2, "class", "blog-title svelte-10y6o6x");
			attr(img, "class", "feature-image svelte-10y6o6x");
			if (img.src !== (img_src_value = "assets/" + /*image*/ ctx[4])) attr(img, "src", img_src_value);
			attr(img, "alt", /*alt*/ ctx[5]);
			attr(h3, "id", "black-lines-brand-identity-by-smith");
			attr(h3, "class", "svelte-10y6o6x");
			attr(div0, "class", "body-text svelte-10y6o6x");
			attr(p1, "class", "svelte-10y6o6x");
			attr(p2, "class", "svelte-10y6o6x");
			attr(blockquote, "class", "svelte-10y6o6x");
			attr(article, "class", "site-blog-details svelte-10y6o6x");
			attr(div1, "class", "col-lg-8");
			attr(div2, "class", "row justify-content-center");
			attr(div3, "class", "container");
			attr(section, "class", "site-blog details svelte-10y6o6x");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div3);
			append(div3, div2);
			append(div2, div1);
			append(div1, article);
			append(article, p0);
			append(p0, span0);
			append(span0, t0);
			append(p0, t1);
			append(p0, span1);
			append(span1, t2);
			append(article, t3);
			append(article, h2);
			append(h2, t4);
			append(article, t5);
			append(article, img);
			append(article, t6);
			append(article, h3);
			append(h3, t7);
			append(article, t8);
			append(article, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(article, t9);
			append(article, blockquote);
			append(blockquote, p1);
			append(p1, t10);
			append(blockquote, t11);
			append(blockquote, p2);
			append(p2, t12);
		},
		p(ctx, [dirty]) {
			if (dirty & /*date*/ 1) set_data(t0, /*date*/ ctx[0]);
			if (dirty & /*author*/ 2) set_data(t2, /*author*/ ctx[1]);
			if (dirty & /*title*/ 4) set_data(t4, /*title*/ ctx[2]);

			if (dirty & /*image*/ 16 && img.src !== (img_src_value = "assets/" + /*image*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*alt*/ 32) {
				attr(img, "alt", /*alt*/ ctx[5]);
			}

			if (dirty & /*subtitle*/ 8) set_data(t7, /*subtitle*/ ctx[3]);

			if (dirty & /*body*/ 64) {
				each_value = /*body*/ ctx[6];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*quote*/ 128) set_data(t10, /*quote*/ ctx[7]);
			if (dirty & /*signature*/ 256) set_data(t12, /*signature*/ ctx[8]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { date } = $$props,
		{ author } = $$props,
		{ title } = $$props,
		{ subtitle } = $$props,
		{ image } = $$props,
		{ alt } = $$props,
		{ body } = $$props,
		{ quote } = $$props,
		{ signature } = $$props;

	$$self.$$set = $$props => {
		if ("date" in $$props) $$invalidate(0, date = $$props.date);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("title" in $$props) $$invalidate(2, title = $$props.title);
		if ("subtitle" in $$props) $$invalidate(3, subtitle = $$props.subtitle);
		if ("image" in $$props) $$invalidate(4, image = $$props.image);
		if ("alt" in $$props) $$invalidate(5, alt = $$props.alt);
		if ("body" in $$props) $$invalidate(6, body = $$props.body);
		if ("quote" in $$props) $$invalidate(7, quote = $$props.quote);
		if ("signature" in $$props) $$invalidate(8, signature = $$props.signature);
	};

	return [date, author, title, subtitle, image, alt, body, quote, signature];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			date: 0,
			author: 1,
			title: 2,
			subtitle: 3,
			image: 4,
			alt: 5,
			body: 6,
			quote: 7,
			signature: 8
		});
	}
}

export default Component;