/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let div2;
	let div1;
	let div0;
	let article;
	let p0;
	let span0;
	let t0;
	let t1;
	let span1;
	let t2;
	let t3;
	let h2;
	let t4;
	let t5;
	let img0;
	let img0_src_value;
	let t6;
	let h3;
	let t7;
	let t8;
	let p1;
	let t9;
	let t10;
	let ol0;
	let li0;
	let t11;
	let t12;
	let li1;
	let t13;
	let em0;
	let t14;
	let t15;
	let t16;
	let li2;
	let t17;
	let t18;
	let li3;
	let t19;
	let t20;
	let li4;
	let t21;
	let t22;
	let li5;
	let t23;
	let t24;
	let p2;
	let t25;
	let t26;
	let ol1;
	let li6;
	let t27;
	let t28;
	let li7;
	let t29;
	let em1;
	let t30;
	let t31;
	let t32;
	let li8;
	let t33;
	let t34;
	let li9;
	let t35;
	let t36;
	let li10;
	let t37;
	let t38;
	let li11;
	let t39;
	let t40;
	let p3;
	let img1;
	let img1_src_value;
	let t41;
	let p4;
	let t42;
	let t43;
	let blockquote;
	let p5;
	let t44;
	let t45;
	let p6;
	let t46;

	return {
		c() {
			section = element("section");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			article = element("article");
			p0 = element("p");
			span0 = element("span");
			t0 = text(/*date*/ ctx[1]);
			t1 = text(" by ");
			span1 = element("span");
			t2 = text(/*author*/ ctx[2]);
			t3 = space();
			h2 = element("h2");
			t4 = text(/*title*/ ctx[0]);
			t5 = space();
			img0 = element("img");
			t6 = space();
			h3 = element("h3");
			t7 = text(/*subtitle*/ ctx[9]);
			t8 = space();
			p1 = element("p");
			t9 = text(/*body1*/ ctx[4]);
			t10 = space();
			ol0 = element("ol");
			li0 = element("li");
			t11 = text("ROFL means Rolling on floor laughing.");
			t12 = space();
			li1 = element("li");
			t13 = text("STFU means Shut the ");
			em0 = element("em");
			t14 = text("freak");
			t15 = text(" up.");
			t16 = space();
			li2 = element("li");
			t17 = text("LMK means Let me know.");
			t18 = space();
			li3 = element("li");
			t19 = text("ILY means I love you.");
			t20 = space();
			li4 = element("li");
			t21 = text("YOLO means You only live once.");
			t22 = space();
			li5 = element("li");
			t23 = text("SMH means Shaking my head.");
			t24 = space();
			p2 = element("p");
			t25 = text(/*body2*/ ctx[5]);
			t26 = space();
			ol1 = element("ol");
			li6 = element("li");
			t27 = text("ROFL means Rolling on floor laughing.");
			t28 = space();
			li7 = element("li");
			t29 = text("STFU means Shut the ");
			em1 = element("em");
			t30 = text("freak");
			t31 = text(" up.");
			t32 = space();
			li8 = element("li");
			t33 = text("LMK means Let me know.");
			t34 = space();
			li9 = element("li");
			t35 = text("ILY means I love you.");
			t36 = space();
			li10 = element("li");
			t37 = text("YOLO means You only live once.");
			t38 = space();
			li11 = element("li");
			t39 = text("SMH means Shaking my head.");
			t40 = space();
			p3 = element("p");
			img1 = element("img");
			t41 = space();
			p4 = element("p");
			t42 = text(/*body1*/ ctx[4]);
			t43 = space();
			blockquote = element("blockquote");
			p5 = element("p");
			t44 = text(/*quote*/ ctx[7]);
			t45 = space();
			p6 = element("p");
			t46 = text(/*signature*/ ctx[8]);
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div2 = claim_element(section_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			article = claim_element(div0_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			p0 = claim_element(article_nodes, "P", {});
			var p0_nodes = children(p0);
			span0 = claim_element(p0_nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, /*date*/ ctx[1]);
			span0_nodes.forEach(detach);
			t1 = claim_text(p0_nodes, " by ");
			span1 = claim_element(p0_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t2 = claim_text(span1_nodes, /*author*/ ctx[2]);
			span1_nodes.forEach(detach);
			p0_nodes.forEach(detach);
			t3 = claim_space(article_nodes);
			h2 = claim_element(article_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t4 = claim_text(h2_nodes, /*title*/ ctx[0]);
			h2_nodes.forEach(detach);
			t5 = claim_space(article_nodes);
			img0 = claim_element(article_nodes, "IMG", { class: true, src: true, alt: true });
			t6 = claim_space(article_nodes);
			h3 = claim_element(article_nodes, "H3", { id: true });
			var h3_nodes = children(h3);
			t7 = claim_text(h3_nodes, /*subtitle*/ ctx[9]);
			h3_nodes.forEach(detach);
			t8 = claim_space(article_nodes);
			p1 = claim_element(article_nodes, "P", {});
			var p1_nodes = children(p1);
			t9 = claim_text(p1_nodes, /*body1*/ ctx[4]);
			p1_nodes.forEach(detach);
			t10 = claim_space(article_nodes);
			ol0 = claim_element(article_nodes, "OL", {});
			var ol0_nodes = children(ol0);
			li0 = claim_element(ol0_nodes, "LI", {});
			var li0_nodes = children(li0);
			t11 = claim_text(li0_nodes, "ROFL means Rolling on floor laughing.");
			li0_nodes.forEach(detach);
			t12 = claim_space(ol0_nodes);
			li1 = claim_element(ol0_nodes, "LI", {});
			var li1_nodes = children(li1);
			t13 = claim_text(li1_nodes, "STFU means Shut the ");
			em0 = claim_element(li1_nodes, "EM", {});
			var em0_nodes = children(em0);
			t14 = claim_text(em0_nodes, "freak");
			em0_nodes.forEach(detach);
			t15 = claim_text(li1_nodes, " up.");
			li1_nodes.forEach(detach);
			t16 = claim_space(ol0_nodes);
			li2 = claim_element(ol0_nodes, "LI", {});
			var li2_nodes = children(li2);
			t17 = claim_text(li2_nodes, "LMK means Let me know.");
			li2_nodes.forEach(detach);
			t18 = claim_space(ol0_nodes);
			li3 = claim_element(ol0_nodes, "LI", {});
			var li3_nodes = children(li3);
			t19 = claim_text(li3_nodes, "ILY means I love you.");
			li3_nodes.forEach(detach);
			t20 = claim_space(ol0_nodes);
			li4 = claim_element(ol0_nodes, "LI", {});
			var li4_nodes = children(li4);
			t21 = claim_text(li4_nodes, "YOLO means You only live once.");
			li4_nodes.forEach(detach);
			t22 = claim_space(ol0_nodes);
			li5 = claim_element(ol0_nodes, "LI", {});
			var li5_nodes = children(li5);
			t23 = claim_text(li5_nodes, "SMH means Shaking my head.");
			li5_nodes.forEach(detach);
			ol0_nodes.forEach(detach);
			t24 = claim_space(article_nodes);
			p2 = claim_element(article_nodes, "P", {});
			var p2_nodes = children(p2);
			t25 = claim_text(p2_nodes, /*body2*/ ctx[5]);
			p2_nodes.forEach(detach);
			t26 = claim_space(article_nodes);
			ol1 = claim_element(article_nodes, "OL", {});
			var ol1_nodes = children(ol1);
			li6 = claim_element(ol1_nodes, "LI", {});
			var li6_nodes = children(li6);
			t27 = claim_text(li6_nodes, "ROFL means Rolling on floor laughing.");
			li6_nodes.forEach(detach);
			t28 = claim_space(ol1_nodes);
			li7 = claim_element(ol1_nodes, "LI", {});
			var li7_nodes = children(li7);
			t29 = claim_text(li7_nodes, "STFU means Shut the ");
			em1 = claim_element(li7_nodes, "EM", {});
			var em1_nodes = children(em1);
			t30 = claim_text(em1_nodes, "freak");
			em1_nodes.forEach(detach);
			t31 = claim_text(li7_nodes, " up.");
			li7_nodes.forEach(detach);
			t32 = claim_space(ol1_nodes);
			li8 = claim_element(ol1_nodes, "LI", {});
			var li8_nodes = children(li8);
			t33 = claim_text(li8_nodes, "LMK means Let me know.");
			li8_nodes.forEach(detach);
			t34 = claim_space(ol1_nodes);
			li9 = claim_element(ol1_nodes, "LI", {});
			var li9_nodes = children(li9);
			t35 = claim_text(li9_nodes, "ILY means I love you.");
			li9_nodes.forEach(detach);
			t36 = claim_space(ol1_nodes);
			li10 = claim_element(ol1_nodes, "LI", {});
			var li10_nodes = children(li10);
			t37 = claim_text(li10_nodes, "YOLO means You only live once.");
			li10_nodes.forEach(detach);
			t38 = claim_space(ol1_nodes);
			li11 = claim_element(ol1_nodes, "LI", {});
			var li11_nodes = children(li11);
			t39 = claim_text(li11_nodes, "SMH means Shaking my head.");
			li11_nodes.forEach(detach);
			ol1_nodes.forEach(detach);
			t40 = claim_space(article_nodes);
			p3 = claim_element(article_nodes, "P", {});
			var p3_nodes = children(p3);
			img1 = claim_element(p3_nodes, "IMG", { src: true, alt: true });
			p3_nodes.forEach(detach);
			t41 = claim_space(article_nodes);
			p4 = claim_element(article_nodes, "P", {});
			var p4_nodes = children(p4);
			t42 = claim_text(p4_nodes, /*body1*/ ctx[4]);
			p4_nodes.forEach(detach);
			t43 = claim_space(article_nodes);
			blockquote = claim_element(article_nodes, "BLOCKQUOTE", {});
			var blockquote_nodes = children(blockquote);
			p5 = claim_element(blockquote_nodes, "P", {});
			var p5_nodes = children(p5);
			t44 = claim_text(p5_nodes, /*quote*/ ctx[7]);
			p5_nodes.forEach(detach);
			t45 = claim_space(blockquote_nodes);
			p6 = claim_element(blockquote_nodes, "P", {});
			var p6_nodes = children(p6);
			t46 = claim_text(p6_nodes, /*signature*/ ctx[8]);
			p6_nodes.forEach(detach);
			blockquote_nodes.forEach(detach);
			article_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h2, "class", "blog-title");
			attr(img0, "class", "feature-image");
			if (img0.src !== (img0_src_value = "/assets/" + /*image*/ ctx[3])) attr(img0, "src", img0_src_value);
			attr(img0, "alt", "blog-feature-image");
			attr(h3, "id", "black-lines-brand-identity-by-smith");
			if (img1.src !== (img1_src_value = "/assets/" + /*subimage*/ ctx[6])) attr(img1, "src", img1_src_value);
			attr(img1, "alt", "blog-details-image-02");
			attr(article, "class", "site-blog-details");
			attr(div0, "class", "col-lg-8");
			attr(div1, "class", "row justify-content-center");
			attr(div2, "class", "container");
			attr(section, "class", "site-blog details");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div2);
			append(div2, div1);
			append(div1, div0);
			append(div0, article);
			append(article, p0);
			append(p0, span0);
			append(span0, t0);
			append(p0, t1);
			append(p0, span1);
			append(span1, t2);
			append(article, t3);
			append(article, h2);
			append(h2, t4);
			append(article, t5);
			append(article, img0);
			append(article, t6);
			append(article, h3);
			append(h3, t7);
			append(article, t8);
			append(article, p1);
			append(p1, t9);
			append(article, t10);
			append(article, ol0);
			append(ol0, li0);
			append(li0, t11);
			append(ol0, t12);
			append(ol0, li1);
			append(li1, t13);
			append(li1, em0);
			append(em0, t14);
			append(li1, t15);
			append(ol0, t16);
			append(ol0, li2);
			append(li2, t17);
			append(ol0, t18);
			append(ol0, li3);
			append(li3, t19);
			append(ol0, t20);
			append(ol0, li4);
			append(li4, t21);
			append(ol0, t22);
			append(ol0, li5);
			append(li5, t23);
			append(article, t24);
			append(article, p2);
			append(p2, t25);
			append(article, t26);
			append(article, ol1);
			append(ol1, li6);
			append(li6, t27);
			append(ol1, t28);
			append(ol1, li7);
			append(li7, t29);
			append(li7, em1);
			append(em1, t30);
			append(li7, t31);
			append(ol1, t32);
			append(ol1, li8);
			append(li8, t33);
			append(ol1, t34);
			append(ol1, li9);
			append(li9, t35);
			append(ol1, t36);
			append(ol1, li10);
			append(li10, t37);
			append(ol1, t38);
			append(ol1, li11);
			append(li11, t39);
			append(article, t40);
			append(article, p3);
			append(p3, img1);
			append(article, t41);
			append(article, p4);
			append(p4, t42);
			append(article, t43);
			append(article, blockquote);
			append(blockquote, p5);
			append(p5, t44);
			append(blockquote, t45);
			append(blockquote, p6);
			append(p6, t46);
		},
		p(ctx, [dirty]) {
			if (dirty & /*date*/ 2) set_data(t0, /*date*/ ctx[1]);
			if (dirty & /*author*/ 4) set_data(t2, /*author*/ ctx[2]);
			if (dirty & /*title*/ 1) set_data(t4, /*title*/ ctx[0]);

			if (dirty & /*image*/ 8 && img0.src !== (img0_src_value = "/assets/" + /*image*/ ctx[3])) {
				attr(img0, "src", img0_src_value);
			}

			if (dirty & /*subtitle*/ 512) set_data(t7, /*subtitle*/ ctx[9]);
			if (dirty & /*body1*/ 16) set_data(t9, /*body1*/ ctx[4]);
			if (dirty & /*body2*/ 32) set_data(t25, /*body2*/ ctx[5]);

			if (dirty & /*subimage*/ 64 && img1.src !== (img1_src_value = "/assets/" + /*subimage*/ ctx[6])) {
				attr(img1, "src", img1_src_value);
			}

			if (dirty & /*body1*/ 16) set_data(t42, /*body1*/ ctx[4]);
			if (dirty & /*quote*/ 128) set_data(t44, /*quote*/ ctx[7]);
			if (dirty & /*signature*/ 256) set_data(t46, /*signature*/ ctx[8]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ date } = $$props,
		{ author } = $$props,
		{ image } = $$props,
		{ body1 } = $$props,
		{ body2 } = $$props,
		{ subimage } = $$props,
		{ quote } = $$props,
		{ signature } = $$props,
		{ subtitle } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("date" in $$props) $$invalidate(1, date = $$props.date);
		if ("author" in $$props) $$invalidate(2, author = $$props.author);
		if ("image" in $$props) $$invalidate(3, image = $$props.image);
		if ("body1" in $$props) $$invalidate(4, body1 = $$props.body1);
		if ("body2" in $$props) $$invalidate(5, body2 = $$props.body2);
		if ("subimage" in $$props) $$invalidate(6, subimage = $$props.subimage);
		if ("quote" in $$props) $$invalidate(7, quote = $$props.quote);
		if ("signature" in $$props) $$invalidate(8, signature = $$props.signature);
		if ("subtitle" in $$props) $$invalidate(9, subtitle = $$props.subtitle);
	};

	return [title, date, author, image, body1, body2, subimage, quote, signature, subtitle];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			date: 1,
			author: 2,
			image: 3,
			body1: 4,
			body2: 5,
			subimage: 6,
			quote: 7,
			signature: 8,
			subtitle: 9
		});
	}
}

export default Component;