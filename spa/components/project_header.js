/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let div4;
	let div3;
	let div1;
	let div0;
	let h1;
	let t0;
	let t1;
	let span0;
	let t2;
	let t3;
	let t4;
	let t5;
	let span1;
	let t6;
	let t7;
	let div2;
	let a;
	let span2;
	let t8;
	let t9;
	let img;
	let img_src_value;
	let mounted;
	let dispose;

	return {
		c() {
			section = element("section");
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t0 = text(/*title1*/ ctx[0]);
			t1 = space();
			span0 = element("span");
			t2 = text(/*title2*/ ctx[1]);
			t3 = space();
			t4 = text(/*title3*/ ctx[2]);
			t5 = space();
			span1 = element("span");
			t6 = text(/*title4*/ ctx[3]);
			t7 = space();
			div2 = element("div");
			a = element("a");
			span2 = element("span");
			t8 = text(/*body*/ ctx[4]);
			t9 = space();
			img = element("img");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div4 = claim_element(section_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title1*/ ctx[0]);
			t1 = claim_space(h1_nodes);
			span0 = claim_element(h1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t2 = claim_text(span0_nodes, /*title2*/ ctx[1]);
			span0_nodes.forEach(detach);
			t3 = claim_space(h1_nodes);
			t4 = claim_text(h1_nodes, /*title3*/ ctx[2]);
			t5 = claim_space(h1_nodes);
			span1 = claim_element(h1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t6 = claim_text(span1_nodes, /*title4*/ ctx[3]);
			span1_nodes.forEach(detach);
			h1_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t7 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			a = claim_element(div2_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			span2 = claim_element(a_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t8 = claim_text(span2_nodes, /*body*/ ctx[4]);
			span2_nodes.forEach(detach);
			t9 = claim_space(a_nodes);
			img = claim_element(a_nodes, "IMG", { src: true, alt: true, class: true });
			a_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span0, "class", "svelte-5905uw");
			attr(span1, "class", "svelte-5905uw");
			attr(h1, "class", "svelte-5905uw");
			attr(div0, "class", "site-project-header-content svelte-5905uw");
			attr(div1, "class", "col-lg-8");
			attr(span2, "class", "svelte-5905uw");
			if (img.src !== (img_src_value = "assets/" + /*image*/ ctx[5])) attr(img, "src", img_src_value);
			attr(img, "alt", /*alt*/ ctx[6]);
			attr(img, "class", "svelte-5905uw");
			attr(a, "href", "#project");
			attr(a, "class", "site-project-header-action scroll-to svelte-5905uw");
			attr(div2, "class", "col-lg-4");
			attr(div3, "class", "row align-items-center");
			attr(div4, "class", "container");
			attr(section, "class", "site-project-header svelte-5905uw");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div4);
			append(div4, div3);
			append(div3, div1);
			append(div1, div0);
			append(div0, h1);
			append(h1, t0);
			append(h1, t1);
			append(h1, span0);
			append(span0, t2);
			append(h1, t3);
			append(h1, t4);
			append(h1, t5);
			append(h1, span1);
			append(span1, t6);
			append(div3, t7);
			append(div3, div2);
			append(div2, a);
			append(a, span2);
			append(span2, t8);
			append(a, t9);
			append(a, img);

			if (!mounted) {
				dispose = listen(a, "click", prevent_default(/*smoothScroll*/ ctx[7]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*title1*/ 1) set_data(t0, /*title1*/ ctx[0]);
			if (dirty & /*title2*/ 2) set_data(t2, /*title2*/ ctx[1]);
			if (dirty & /*title3*/ 4) set_data(t4, /*title3*/ ctx[2]);
			if (dirty & /*title4*/ 8) set_data(t6, /*title4*/ ctx[3]);
			if (dirty & /*body*/ 16) set_data(t8, /*body*/ ctx[4]);

			if (dirty & /*image*/ 32 && img.src !== (img_src_value = "assets/" + /*image*/ ctx[5])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*alt*/ 64) {
				attr(img, "alt", /*alt*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title1 } = $$props,
		{ title2 } = $$props,
		{ title3 } = $$props,
		{ title4 } = $$props,
		{ body } = $$props,
		{ image } = $$props,
		{ alt } = $$props;

	const smoothScroll = () => {
		let element_to_scroll_to = document.getElementById("project");
		element_to_scroll_to.scrollIntoView({ behavior: "smooth" });
	};

	$$self.$$set = $$props => {
		if ("title1" in $$props) $$invalidate(0, title1 = $$props.title1);
		if ("title2" in $$props) $$invalidate(1, title2 = $$props.title2);
		if ("title3" in $$props) $$invalidate(2, title3 = $$props.title3);
		if ("title4" in $$props) $$invalidate(3, title4 = $$props.title4);
		if ("body" in $$props) $$invalidate(4, body = $$props.body);
		if ("image" in $$props) $$invalidate(5, image = $$props.image);
		if ("alt" in $$props) $$invalidate(6, alt = $$props.alt);
	};

	return [title1, title2, title3, title4, body, image, alt, smoothScroll];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title1: 0,
			title2: 1,
			title3: 2,
			title4: 3,
			body: 4,
			image: 5,
			alt: 6
		});
	}
}

export default Component;