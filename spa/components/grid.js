/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let div14;
	let div13;
	let div12;
	let div0;
	let h2;
	let t0;
	let t1;
	let div11;
	let div1;
	let img0;
	let img0_src_value;
	let t2;
	let div2;
	let img1;
	let img1_src_value;
	let t3;
	let div3;
	let img2;
	let img2_src_value;
	let t4;
	let div4;
	let img3;
	let img3_src_value;
	let t5;
	let div5;
	let img4;
	let img4_src_value;
	let t6;
	let div6;
	let img5;
	let img5_src_value;
	let t7;
	let div7;
	let img6;
	let img6_src_value;
	let t8;
	let div8;
	let img7;
	let img7_src_value;
	let t9;
	let div9;
	let img8;
	let img8_src_value;
	let t10;
	let div10;
	let img9;
	let img9_src_value;

	return {
		c() {
			section = element("section");
			div14 = element("div");
			div13 = element("div");
			div12 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			div11 = element("div");
			div1 = element("div");
			img0 = element("img");
			t2 = space();
			div2 = element("div");
			img1 = element("img");
			t3 = space();
			div3 = element("div");
			img2 = element("img");
			t4 = space();
			div4 = element("div");
			img3 = element("img");
			t5 = space();
			div5 = element("div");
			img4 = element("img");
			t6 = space();
			div6 = element("div");
			img5 = element("img");
			t7 = space();
			div7 = element("div");
			img6 = element("img");
			t8 = space();
			div8 = element("div");
			img7 = element("img");
			t9 = space();
			div9 = element("div");
			img8 = element("img");
			t10 = space();
			div10 = element("div");
			img9 = element("img");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div14 = claim_element(section_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			div13 = claim_element(div14_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			div12 = claim_element(div13_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			div0 = claim_element(div12_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*title*/ ctx[0]);
			h2_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t1 = claim_space(div12_nodes);
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div1 = claim_element(div11_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img0 = claim_element(div1_nodes, "IMG", { src: true, alt: true });
			div1_nodes.forEach(detach);
			t2 = claim_space(div11_nodes);
			div2 = claim_element(div11_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			img1 = claim_element(div2_nodes, "IMG", { src: true });
			div2_nodes.forEach(detach);
			t3 = claim_space(div11_nodes);
			div3 = claim_element(div11_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			img2 = claim_element(div3_nodes, "IMG", { src: true, alt: true });
			div3_nodes.forEach(detach);
			t4 = claim_space(div11_nodes);
			div4 = claim_element(div11_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			img3 = claim_element(div4_nodes, "IMG", { src: true, alt: true });
			div4_nodes.forEach(detach);
			t5 = claim_space(div11_nodes);
			div5 = claim_element(div11_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			img4 = claim_element(div5_nodes, "IMG", { src: true, alt: true });
			div5_nodes.forEach(detach);
			t6 = claim_space(div11_nodes);
			div6 = claim_element(div11_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			img5 = claim_element(div6_nodes, "IMG", { src: true, alt: true });
			div6_nodes.forEach(detach);
			t7 = claim_space(div11_nodes);
			div7 = claim_element(div11_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			img6 = claim_element(div7_nodes, "IMG", { src: true, alt: true });
			div7_nodes.forEach(detach);
			t8 = claim_space(div11_nodes);
			div8 = claim_element(div11_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			img7 = claim_element(div8_nodes, "IMG", { src: true, alt: true });
			div8_nodes.forEach(detach);
			t9 = claim_space(div11_nodes);
			div9 = claim_element(div11_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			img8 = claim_element(div9_nodes, "IMG", { src: true, alt: true });
			div9_nodes.forEach(detach);
			t10 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			img9 = claim_element(div10_nodes, "IMG", { src: true, alt: true });
			div10_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			div13_nodes.forEach(detach);
			div14_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h2, "class", "svelte-zbxxww");
			attr(div0, "class", "section-title svelte-zbxxww");
			if (img0.src !== (img0_src_value = "assets" + /*items*/ ctx[1].item1)) attr(img0, "src", img0_src_value);
			attr(img0, "alt", "client-logo");
			attr(div1, "class", "site-client-item svelte-zbxxww");
			if (img1.src !== (img1_src_value = "assets" + /*items*/ ctx[1].item2)) attr(img1, "src", img1_src_value);
			attr(div2, "class", "site-client-item svelte-zbxxww");
			if (img2.src !== (img2_src_value = "assets" + /*items*/ ctx[1].item3)) attr(img2, "src", img2_src_value);
			attr(img2, "alt", "client-logo");
			attr(div3, "class", "site-client-item svelte-zbxxww");
			if (img3.src !== (img3_src_value = "assets" + /*items*/ ctx[1].item4)) attr(img3, "src", img3_src_value);
			attr(img3, "alt", "client-logo");
			attr(div4, "class", "site-client-item svelte-zbxxww");
			if (img4.src !== (img4_src_value = "assets" + /*items*/ ctx[1].item5)) attr(img4, "src", img4_src_value);
			attr(img4, "alt", "client-logo");
			attr(div5, "class", "site-client-item svelte-zbxxww");
			if (img5.src !== (img5_src_value = "assets" + /*items*/ ctx[1].item6)) attr(img5, "src", img5_src_value);
			attr(img5, "alt", "client-logo");
			attr(div6, "class", "site-client-item svelte-zbxxww");
			if (img6.src !== (img6_src_value = "assets" + /*items*/ ctx[1].item7)) attr(img6, "src", img6_src_value);
			attr(img6, "alt", "client-logo");
			attr(div7, "class", "site-client-item svelte-zbxxww");
			if (img7.src !== (img7_src_value = "assets" + /*items*/ ctx[1].item8)) attr(img7, "src", img7_src_value);
			attr(img7, "alt", "client-logo");
			attr(div8, "class", "site-client-item svelte-zbxxww");
			if (img8.src !== (img8_src_value = "assets" + /*items*/ ctx[1].item9)) attr(img8, "src", img8_src_value);
			attr(img8, "alt", "client-logo");
			attr(div9, "class", "site-client-item svelte-zbxxww");
			if (img9.src !== (img9_src_value = "assets" + /*items*/ ctx[1].item10)) attr(img9, "src", img9_src_value);
			attr(img9, "alt", "client-logo");
			attr(div10, "class", "site-client-item svelte-zbxxww");
			attr(div11, "class", "site-client-wrapper svelte-zbxxww");
			attr(div12, "class", "col-12");
			attr(div13, "class", "row");
			attr(div14, "class", "container");
			attr(section, "class", "site-client svelte-zbxxww");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div14);
			append(div14, div13);
			append(div13, div12);
			append(div12, div0);
			append(div0, h2);
			append(h2, t0);
			append(div12, t1);
			append(div12, div11);
			append(div11, div1);
			append(div1, img0);
			append(div11, t2);
			append(div11, div2);
			append(div2, img1);
			append(div11, t3);
			append(div11, div3);
			append(div3, img2);
			append(div11, t4);
			append(div11, div4);
			append(div4, img3);
			append(div11, t5);
			append(div11, div5);
			append(div5, img4);
			append(div11, t6);
			append(div11, div6);
			append(div6, img5);
			append(div11, t7);
			append(div11, div7);
			append(div7, img6);
			append(div11, t8);
			append(div11, div8);
			append(div8, img7);
			append(div11, t9);
			append(div11, div9);
			append(div9, img8);
			append(div11, t10);
			append(div11, div10);
			append(div10, img9);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);

			if (dirty & /*items*/ 2 && img0.src !== (img0_src_value = "assets" + /*items*/ ctx[1].item1)) {
				attr(img0, "src", img0_src_value);
			}

			if (dirty & /*items*/ 2 && img1.src !== (img1_src_value = "assets" + /*items*/ ctx[1].item2)) {
				attr(img1, "src", img1_src_value);
			}

			if (dirty & /*items*/ 2 && img2.src !== (img2_src_value = "assets" + /*items*/ ctx[1].item3)) {
				attr(img2, "src", img2_src_value);
			}

			if (dirty & /*items*/ 2 && img3.src !== (img3_src_value = "assets" + /*items*/ ctx[1].item4)) {
				attr(img3, "src", img3_src_value);
			}

			if (dirty & /*items*/ 2 && img4.src !== (img4_src_value = "assets" + /*items*/ ctx[1].item5)) {
				attr(img4, "src", img4_src_value);
			}

			if (dirty & /*items*/ 2 && img5.src !== (img5_src_value = "assets" + /*items*/ ctx[1].item6)) {
				attr(img5, "src", img5_src_value);
			}

			if (dirty & /*items*/ 2 && img6.src !== (img6_src_value = "assets" + /*items*/ ctx[1].item7)) {
				attr(img6, "src", img6_src_value);
			}

			if (dirty & /*items*/ 2 && img7.src !== (img7_src_value = "assets" + /*items*/ ctx[1].item8)) {
				attr(img7, "src", img7_src_value);
			}

			if (dirty & /*items*/ 2 && img8.src !== (img8_src_value = "assets" + /*items*/ ctx[1].item9)) {
				attr(img8, "src", img8_src_value);
			}

			if (dirty & /*items*/ 2 && img9.src !== (img9_src_value = "assets" + /*items*/ ctx[1].item10)) {
				attr(img9, "src", img9_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { body } = $$props, { items } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("body" in $$props) $$invalidate(2, body = $$props.body);
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
	};

	return [title, items, body];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, body: 2, items: 1 });
	}
}

export default Component;