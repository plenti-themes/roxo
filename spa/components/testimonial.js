/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (19:8) {#each items as item}
function create_each_block(ctx) {
	let div4;
	let div3;
	let div2;
	let div0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div1;
	let h5;
	let t1_value = /*item*/ ctx[5].title + "";
	let t1;
	let t2;
	let p0;
	let t3_value = /*item*/ ctx[5].position + "";
	let t3;
	let t4;
	let p1;
	let t5;
	let t6_value = /*item*/ ctx[5].bio + "";
	let t6;
	let t7;
	let t8;

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			h5 = element("h5");
			t1 = text(t1_value);
			t2 = space();
			p0 = element("p");
			t3 = text(t3_value);
			t4 = space();
			p1 = element("p");
			t5 = text("\"");
			t6 = text(t6_value);
			t7 = text("\"");
			t8 = space();
			this.h();
		},
		l(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h5 = claim_element(div1_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t1 = claim_text(h5_nodes, t1_value);
			h5_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, t3_value);
			p0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t4 = claim_space(div3_nodes);
			p1 = claim_element(div3_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t5 = claim_text(p1_nodes, "\"");
			t6 = claim_text(p1_nodes, t6_value);
			t7 = claim_text(p1_nodes, "\"");
			p1_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t8 = claim_space(div4_nodes);
			div4_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (img.src !== (img_src_value = "assets" + /*item*/ ctx[5].image)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*item*/ ctx[5].alt);
			attr(img, "class", "svelte-67r6iy");
			attr(div0, "class", "thumb svelte-67r6iy");
			attr(h5, "class", "svelte-67r6iy");
			attr(p0, "class", "svelte-67r6iy");
			attr(div1, "class", "person svelte-67r6iy");
			attr(div2, "class", "site-testimonial-item-header svelte-67r6iy");
			attr(p1, "class", "site-testimonial-item-body svelte-67r6iy");
			attr(div3, "class", "site-testimonial-item svelte-67r6iy");
			attr(div4, "class", "col-lg-4 col-md-6 svelte-67r6iy");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			append(div0, img);
			append(div2, t0);
			append(div2, div1);
			append(div1, h5);
			append(h5, t1);
			append(div1, t2);
			append(div1, p0);
			append(p0, t3);
			append(div3, t4);
			append(div3, p1);
			append(p1, t5);
			append(p1, t6);
			append(p1, t7);
			append(div4, t8);
		},
		p(ctx, dirty) {
			if (dirty & /*items*/ 4 && img.src !== (img_src_value = "assets" + /*item*/ ctx[5].image)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*items*/ 4 && img_alt_value !== (img_alt_value = /*item*/ ctx[5].alt)) {
				attr(img, "alt", img_alt_value);
			}

			if (dirty & /*items*/ 4 && t1_value !== (t1_value = /*item*/ ctx[5].title + "")) set_data(t1, t1_value);
			if (dirty & /*items*/ 4 && t3_value !== (t3_value = /*item*/ ctx[5].position + "")) set_data(t3, t3_value);
			if (dirty & /*items*/ 4 && t6_value !== (t6_value = /*item*/ ctx[5].bio + "")) set_data(t6, t6_value);
		},
		d(detaching) {
			if (detaching) detach(div4);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div3;
	let div2;
	let div1;
	let div0;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let each_value = /*items*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*body*/ ctx[1]);
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div3 = claim_element(section_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*title*/ ctx[0]);
			h2_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, /*body*/ ctx[1]);
			p_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t3 = claim_space(div2_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h2, "class", "svelte-67r6iy");
			attr(p, "class", "svelte-67r6iy");
			attr(div0, "class", "section-title svelte-67r6iy");
			attr(div1, "class", "col-12 svelte-67r6iy");
			attr(div2, "class", "row svelte-67r6iy");
			attr(div3, "class", "container svelte-67r6iy");
			attr(section, "class", "site-testimonial svelte-67r6iy");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div3);
			append(div3, div2);
			append(div2, div1);
			append(div1, div0);
			append(div0, h2);
			append(h2, t0);
			append(div0, t1);
			append(div0, p);
			append(p, t2);
			append(div2, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*body*/ 2) set_data(t2, /*body*/ ctx[1]);

			if (dirty & /*items*/ 4) {
				each_value = /*items*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ body } = $$props,
		{ items } = $$props,
		{ image } = $$props,
		{ link } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("body" in $$props) $$invalidate(1, body = $$props.body);
		if ("items" in $$props) $$invalidate(2, items = $$props.items);
		if ("image" in $$props) $$invalidate(3, image = $$props.image);
		if ("link" in $$props) $$invalidate(4, link = $$props.link);
	};

	return [title, body, items, image, link];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			body: 1,
			items: 2,
			image: 3,
			link: 4
		});
	}
}

export default Component;