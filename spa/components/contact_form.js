/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (29:40) {#each project_types as project}
function create_each_block(ctx) {
	let option;
	let t_value = /*project*/ ctx[4].name + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", {});
			var option_nodes = children(option);
			t = claim_text(option_nodes, t_value);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*project*/ ctx[4].id;
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*project_types*/ 8 && t_value !== (t_value = /*project*/ ctx[4].name + "")) set_data(t, t_value);

			if (dirty & /*project_types*/ 8 && option_value_value !== (option_value_value = /*project*/ ctx[4].id)) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div12;
	let div11;
	let div0;
	let h1;
	let t0;
	let div10;
	let div9;
	let h4;
	let t1;
	let t2;
	let form;
	let div8;
	let div1;
	let input0;
	let t3;
	let div2;
	let input1;
	let t4;
	let div3;
	let input2;
	let t5;
	let div5;
	let div4;
	let select;
	let option;
	let t6;
	let t7;
	let div6;
	let textarea;
	let t8;
	let div7;
	let button;
	let span1;
	let span0;
	let t9;
	let t10;
	let p;
	let each_value = /*project_types*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");
			div12 = element("div");
			div11 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t0 = space();
			div10 = element("div");
			div9 = element("div");
			h4 = element("h4");
			t1 = text(/*title*/ ctx[1]);
			t2 = space();
			form = element("form");
			div8 = element("div");
			div1 = element("div");
			input0 = element("input");
			t3 = space();
			div2 = element("div");
			input1 = element("input");
			t4 = space();
			div3 = element("div");
			input2 = element("input");
			t5 = space();
			div5 = element("div");
			div4 = element("div");
			select = element("select");
			option = element("option");
			t6 = text("Project Type");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			div6 = element("div");
			textarea = element("textarea");
			t8 = space();
			div7 = element("div");
			button = element("button");
			span1 = element("span");
			span0 = element("span");
			t9 = text("Send Message");
			t10 = space();
			p = element("p");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div12 = claim_element(section_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div0 = claim_element(div11_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t0 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			h4 = claim_element(div9_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t1 = claim_text(h4_nodes, /*title*/ ctx[1]);
			h4_nodes.forEach(detach);
			t2 = claim_space(div9_nodes);
			form = claim_element(div9_nodes, "FORM", { id: true, action: true, method: true });
			var form_nodes = children(form);
			div8 = claim_element(form_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div1 = claim_element(div8_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			input0 = claim_element(div1_nodes, "INPUT", {
				type: true,
				class: true,
				name: true,
				id: true,
				placeholder: true
			});

			div1_nodes.forEach(detach);
			t3 = claim_space(div8_nodes);
			div2 = claim_element(div8_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			input1 = claim_element(div2_nodes, "INPUT", {
				type: true,
				class: true,
				name: true,
				id: true,
				placeholder: true
			});

			div2_nodes.forEach(detach);
			t4 = claim_space(div8_nodes);
			div3 = claim_element(div8_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			input2 = claim_element(div3_nodes, "INPUT", {
				type: true,
				class: true,
				name: true,
				id: true,
				placeholder: true
			});

			div3_nodes.forEach(detach);
			t5 = claim_space(div8_nodes);
			div5 = claim_element(div8_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			select = claim_element(div4_nodes, "SELECT", { class: true, id: true, name: true });
			var select_nodes = children(select);
			option = claim_element(select_nodes, "OPTION", { class: true });
			var option_nodes = children(option);
			t6 = claim_text(option_nodes, "Project Type");
			option_nodes.forEach(detach);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			t7 = claim_space(div8_nodes);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);

			textarea = claim_element(div6_nodes, "TEXTAREA", {
				class: true,
				id: true,
				name: true,
				rows: true,
				placeholder: true
			});

			children(textarea).forEach(detach);
			div6_nodes.forEach(detach);
			t8 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			button = claim_element(div7_nodes, "BUTTON", { type: true, class: true, id: true });
			var button_nodes = children(button);
			span1 = claim_element(button_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { "data-text": true });
			var span0_nodes = children(span0);
			t9 = claim_text(span0_nodes, "Send Message");
			span0_nodes.forEach(detach);
			span1_nodes.forEach(detach);
			button_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			t10 = claim_space(div8_nodes);
			p = claim_element(div8_nodes, "P", { id: true });
			children(p).forEach(detach);
			div8_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div9_nodes.forEach(detach);
			div10_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h1, "class", "site-contact-title svelte-r6ogx0");
			attr(div0, "class", "col-lg-5");
			attr(h4, "class", "svelte-r6ogx0");
			attr(input0, "type", "text");
			attr(input0, "class", "form-control svelte-r6ogx0");
			attr(input0, "name", "first-name");
			attr(input0, "id", "first-name");
			attr(input0, "placeholder", "First Name");
			attr(div1, "class", "col-lg-6");
			attr(input1, "type", "text");
			attr(input1, "class", "form-control svelte-r6ogx0");
			attr(input1, "name", "last-name");
			attr(input1, "id", "last-name");
			attr(input1, "placeholder", "Last Name");
			attr(div2, "class", "col-lg-6");
			attr(input2, "type", "email");
			attr(input2, "class", "form-control svelte-r6ogx0");
			attr(input2, "name", "email");
			attr(input2, "id", "email");
			attr(input2, "placeholder", "Email");
			attr(div3, "class", "col-lg-6");
			option.__value = "";
			option.value = option.__value;
			option.selected = true;
			option.disabled = true;
			option.hidden = true;
			attr(option, "class", "svelte-r6ogx0");
			attr(select, "class", "form-control svelte-r6ogx0");
			attr(select, "id", "projectType");
			attr(select, "name", "project-type");
			attr(div4, "class", "select-wrapper svelte-r6ogx0");
			attr(div5, "class", "col-lg-6");
			attr(textarea, "class", "form-control svelte-r6ogx0");
			attr(textarea, "id", "aboutProject");
			attr(textarea, "name", "about-project");
			attr(textarea, "rows", "6");
			attr(textarea, "placeholder", "About the Project");
			attr(div6, "class", "col-12");
			attr(span0, "data-text", "Send Message");
			attr(span1, "class", "btn-area");
			attr(button, "type", "submit");
			attr(button, "class", "btn btn-primary");
			attr(button, "id", "contact-form-button");
			attr(div7, "class", "col-12");
			attr(p, "id", "contact-form-status");
			attr(div8, "class", "row");
			attr(form, "id", "contact-form");
			attr(form, "action", /*post_to*/ ctx[2]);
			attr(form, "method", "POST");
			attr(div9, "class", "site-contact-form svelte-r6ogx0");
			attr(div10, "class", "col-lg-6 ml-auto");
			attr(div11, "class", "row");
			attr(div12, "class", "container");
			attr(section, "class", "site-contact svelte-r6ogx0");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div12);
			append(div12, div11);
			append(div11, div0);
			append(div0, h1);
			h1.innerHTML = /*slogan*/ ctx[0];
			append(div11, t0);
			append(div11, div10);
			append(div10, div9);
			append(div9, h4);
			append(h4, t1);
			append(div9, t2);
			append(div9, form);
			append(form, div8);
			append(div8, div1);
			append(div1, input0);
			append(div8, t3);
			append(div8, div2);
			append(div2, input1);
			append(div8, t4);
			append(div8, div3);
			append(div3, input2);
			append(div8, t5);
			append(div8, div5);
			append(div5, div4);
			append(div4, select);
			append(select, option);
			append(option, t6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			append(div8, t7);
			append(div8, div6);
			append(div6, textarea);
			append(div8, t8);
			append(div8, div7);
			append(div7, button);
			append(button, span1);
			append(span1, span0);
			append(span0, t9);
			append(div8, t10);
			append(div8, p);
		},
		p(ctx, [dirty]) {
			if (dirty & /*slogan*/ 1) h1.innerHTML = /*slogan*/ ctx[0];;
			if (dirty & /*title*/ 2) set_data(t1, /*title*/ ctx[1]);

			if (dirty & /*project_types*/ 8) {
				each_value = /*project_types*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*post_to*/ 4) {
				attr(form, "action", /*post_to*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { slogan } = $$props,
		{ title } = $$props,
		{ post_to } = $$props,
		{ project_types } = $$props;

	$$self.$$set = $$props => {
		if ("slogan" in $$props) $$invalidate(0, slogan = $$props.slogan);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("post_to" in $$props) $$invalidate(2, post_to = $$props.post_to);
		if ("project_types" in $$props) $$invalidate(3, project_types = $$props.project_types);
	};

	return [slogan, title, post_to, project_types];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			slogan: 0,
			title: 1,
			post_to: 2,
			project_types: 3
		});
	}
}

export default Component;