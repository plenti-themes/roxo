/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (24:8) {#each posts as post}
function create_each_block(ctx) {
	let div2;
	let article;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div1;
	let span;
	let t1_value = /*post*/ ctx[4].fields.date + "";
	let t1;
	let t2;
	let h3;
	let a0;
	let t3_value = /*post*/ ctx[4].fields.title + "";
	let t3;
	let a0_href_value;
	let t4;
	let p;
	let t5_value = /*post*/ ctx[4].fields.body[0] + "";
	let t5;
	let t6;
	let t7;
	let a1;
	let t8;
	let a1_href_value;

	return {
		c() {
			div2 = element("div");
			article = element("article");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			h3 = element("h3");
			a0 = element("a");
			t3 = text(t3_value);
			t4 = space();
			p = element("p");
			t5 = text(t5_value);
			t6 = text("..");
			t7 = space();
			a1 = element("a");
			t8 = text("read more");
			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			article = claim_element(div2_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			div0 = claim_element(article_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach);
			t0 = claim_space(article_nodes);
			div1 = claim_element(article_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			span = claim_element(div1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			a0 = claim_element(h3_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t3 = claim_text(a0_nodes, t3_value);
			a0_nodes.forEach(detach);
			h3_nodes.forEach(detach);
			t4 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t5 = claim_text(p_nodes, t5_value);
			t6 = claim_text(p_nodes, "..");
			p_nodes.forEach(detach);
			t7 = claim_space(div1_nodes);
			a1 = claim_element(div1_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t8 = claim_text(a1_nodes, "read more");
			a1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			article_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (img.src !== (img_src_value = "assets/" + /*post*/ ctx[4].fields.image)) attr(img, "src", img_src_value);
			attr(img, "alt", "post-thumb");
			attr(img, "class", "svelte-1129rpz");
			attr(div0, "class", "site-blog-post-thumb svelte-1129rpz");
			attr(span, "class", "svelte-1129rpz");
			attr(a0, "href", a0_href_value = /*post*/ ctx[4].path);
			attr(a0, "class", "svelte-1129rpz");
			attr(h3, "class", "svelte-1129rpz");
			attr(p, "class", "svelte-1129rpz");
			attr(a1, "href", a1_href_value = /*post*/ ctx[4].path);
			attr(a1, "class", "read-more svelte-1129rpz");
			attr(div1, "class", "site-blog-post-content svelte-1129rpz");
			attr(article, "class", "site-blog-post svelte-1129rpz");
			attr(div2, "class", "col-lg-6 svelte-1129rpz");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, article);
			append(article, div0);
			append(div0, img);
			append(article, t0);
			append(article, div1);
			append(div1, span);
			append(span, t1);
			append(div1, t2);
			append(div1, h3);
			append(h3, a0);
			append(a0, t3);
			append(div1, t4);
			append(div1, p);
			append(p, t5);
			append(p, t6);
			append(div1, t7);
			append(div1, a1);
			append(a1, t8);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let section0;
	let div2;
	let div1;
	let div0;
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let section1;
	let div6;
	let div5;
	let t4;
	let div4;
	let div3;
	let ul;
	let li0;
	let a0;
	let span0;
	let t5;
	let t6;
	let li1;
	let a1;
	let span1;
	let t7;
	let t8;
	let li2;
	let a2;
	let t9;
	let t10;
	let li3;
	let a3;
	let t11;
	let t12;
	let li4;
	let a4;
	let span2;
	let t13;
	let t14;
	let li5;
	let a5;
	let span3;
	let t15;
	let each_value = /*posts*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			main = element("main");
			section0 = element("section");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*desc*/ ctx[1]);
			t3 = space();
			section1 = element("section");
			div6 = element("div");
			div5 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div4 = element("div");
			div3 = element("div");
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			span0 = element("span");
			t5 = text("««");
			t6 = space();
			li1 = element("li");
			a1 = element("a");
			span1 = element("span");
			t7 = text("«");
			t8 = space();
			li2 = element("li");
			a2 = element("a");
			t9 = text("1");
			t10 = space();
			li3 = element("li");
			a3 = element("a");
			t11 = text("2");
			t12 = space();
			li4 = element("li");
			a4 = element("a");
			span2 = element("span");
			t13 = text("»");
			t14 = space();
			li5 = element("li");
			a5 = element("a");
			span3 = element("span");
			t15 = text("»»");
			this.h();
		},
		l(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			section0 = claim_element(main_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div2 = claim_element(section0_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, /*desc*/ ctx[1]);
			p_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t3 = claim_space(main_nodes);
			section1 = claim_element(main_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div6 = claim_element(section1_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div5_nodes);
			}

			t4 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			ul = claim_element(div3_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);

			a0 = claim_element(li0_nodes, "A", {
				href: true,
				class: true,
				"aria-label": true
			});

			var a0_nodes = children(a0);
			span0 = claim_element(a0_nodes, "SPAN", { "aria-hidden": true, class: true });
			var span0_nodes = children(span0);
			t5 = claim_text(span0_nodes, "««");
			span0_nodes.forEach(detach);
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t6 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { class: true, "aria-label": true });
			var a1_nodes = children(a1);
			span1 = claim_element(a1_nodes, "SPAN", { "aria-hidden": true, class: true });
			var span1_nodes = children(span1);
			t7 = claim_text(span1_nodes, "«");
			span1_nodes.forEach(detach);
			a1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t8 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { class: true, href: true });
			var a2_nodes = children(a2);
			t9 = claim_text(a2_nodes, "1");
			a2_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			t10 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			a3 = claim_element(li3_nodes, "A", { class: true, href: true });
			var a3_nodes = children(a3);
			t11 = claim_text(a3_nodes, "2");
			a3_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t12 = claim_space(ul_nodes);
			li4 = claim_element(ul_nodes, "LI", { class: true });
			var li4_nodes = children(li4);

			a4 = claim_element(li4_nodes, "A", {
				href: true,
				class: true,
				"aria-label": true
			});

			var a4_nodes = children(a4);
			span2 = claim_element(a4_nodes, "SPAN", { "aria-hidden": true, class: true });
			var span2_nodes = children(span2);
			t13 = claim_text(span2_nodes, "»");
			span2_nodes.forEach(detach);
			a4_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			t14 = claim_space(ul_nodes);
			li5 = claim_element(ul_nodes, "LI", { class: true });
			var li5_nodes = children(li5);

			a5 = claim_element(li5_nodes, "A", {
				href: true,
				class: true,
				"aria-label": true
			});

			var a5_nodes = children(a5);
			span3 = claim_element(a5_nodes, "SPAN", { "aria-hidden": true, class: true });
			var span3_nodes = children(span3);
			t15 = claim_text(span3_nodes, "»»");
			span3_nodes.forEach(detach);
			a5_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			main_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h1, "class", "svelte-1129rpz");
			attr(p, "class", "svelte-1129rpz");
			attr(div0, "class", "col-lg-8 text-center svelte-1129rpz");
			attr(div1, "class", "row justify-content-center svelte-1129rpz");
			attr(div2, "class", "container svelte-1129rpz");
			attr(section0, "class", "site-blog-header svelte-1129rpz");
			attr(span0, "aria-hidden", "true");
			attr(span0, "class", "svelte-1129rpz");
			attr(a0, "href", "/blog/");
			attr(a0, "class", "page-link svelte-1129rpz");
			attr(a0, "aria-label", "First");
			attr(li0, "class", "page-item svelte-1129rpz");
			attr(span1, "aria-hidden", "true");
			attr(span1, "class", "svelte-1129rpz");
			attr(a1, "class", "page-link svelte-1129rpz");
			attr(a1, "aria-label", "Previous");
			attr(li1, "class", "page-item disabled svelte-1129rpz");
			attr(a2, "class", "page-link svelte-1129rpz");
			attr(a2, "href", "/blog/");
			attr(li2, "class", "page-item active svelte-1129rpz");
			attr(a3, "class", "page-link svelte-1129rpz");
			attr(a3, "href", "/blog/page/2/");
			attr(li3, "class", "page-item svelte-1129rpz");
			attr(span2, "aria-hidden", "true");
			attr(span2, "class", "svelte-1129rpz");
			attr(a4, "href", "/blog/page/2/");
			attr(a4, "class", "page-link svelte-1129rpz");
			attr(a4, "aria-label", "Next");
			attr(li4, "class", "page-item svelte-1129rpz");
			attr(span3, "aria-hidden", "true");
			attr(span3, "class", "svelte-1129rpz");
			attr(a5, "href", "/blog/page/2/");
			attr(a5, "class", "page-link svelte-1129rpz");
			attr(a5, "aria-label", "Last");
			attr(li5, "class", "page-item svelte-1129rpz");
			attr(ul, "class", "pagination svelte-1129rpz");
			attr(div3, "class", "site-blog-pagination svelte-1129rpz");
			attr(div4, "class", "col-12 svelte-1129rpz");
			attr(div5, "class", "row svelte-1129rpz");
			attr(div6, "class", "container svelte-1129rpz");
			attr(section1, "class", "site-blog svelte-1129rpz");
			attr(main, "class", "svelte-1129rpz");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, section0);
			append(section0, div2);
			append(div2, div1);
			append(div1, div0);
			append(div0, h1);
			append(h1, t0);
			append(div0, t1);
			append(div0, p);
			append(p, t2);
			append(main, t3);
			append(main, section1);
			append(section1, div6);
			append(div6, div5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div5, null);
			}

			append(div5, t4);
			append(div5, div4);
			append(div4, div3);
			append(div3, ul);
			append(ul, li0);
			append(li0, a0);
			append(a0, span0);
			append(span0, t5);
			append(ul, t6);
			append(ul, li1);
			append(li1, a1);
			append(a1, span1);
			append(span1, t7);
			append(ul, t8);
			append(ul, li2);
			append(li2, a2);
			append(a2, t9);
			append(ul, t10);
			append(ul, li3);
			append(li3, a3);
			append(a3, t11);
			append(ul, t12);
			append(ul, li4);
			append(li4, a4);
			append(a4, span2);
			append(span2, t13);
			append(ul, t14);
			append(ul, li5);
			append(li5, a5);
			append(a5, span3);
			append(span3, t15);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*desc*/ 2) set_data(t2, /*desc*/ ctx[1]);

			if (dirty & /*posts*/ 4) {
				each_value = /*posts*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div5, t4);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(main);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { desc } = $$props, { allContent } = $$props;
	let posts = allContent.filter(content => content.type == "blog_posts");

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("desc" in $$props) $$invalidate(1, desc = $$props.desc);
		if ("allContent" in $$props) $$invalidate(3, allContent = $$props.allContent);
	};

	return [title, desc, posts, allContent];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, desc: 1, allContent: 3 });
	}
}

export default Component;